{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Antourage SDK Features The Antourage Widget is designed to work as a self-contained \u2018widget\u2019 within a host app. Once opened, the widget launches a micro-content vertical that includes live broadcasts, on-demand videos, and image posts. This content is captured by our mobile Broadcaster application or 3rd party input software. Antourage is a mobile and web view experience designed for viewing of real-time and near real-time micro-content. Magnetic Widget The entry point for a user is the magnetic button that appears on the host app. Usually hosted on the main screen, however the button can appear in more than one place. This widget can appear in multiple states. \"Resting\" If there are new content, the widget will be in a \u201cresting\u201d state. When a user clicks the widget in its resting state, they are directed to the main menu of the widget. \"LIVE\" When a broadcaster starts streaming a live video, the button changes state and animates. The live video can be seen inside the widget and the \u201cLIVE\u201d tag appears. If a user taps the widget whilst in this state, they are taken directly to the live broadcast. \"NEW\" When there isn\u2019t a live video, but there is unseen content, the widget animates with a \u201cNEW\u201d tag. If a user clicks the widget at this point, they will subsequently see the main menu. The Main Menu The main menu allows the user to navigate through multiple live and new videos. Whilst navigating through the videos, if they stop scolling a video will play without sound. If a user clicks on the comment or poll icon below any video they will be taken directly to the chat or poll within that video so that they can contribute immediately. The main menu can also be customised, by editing the logo in the corner of the screen to surface the organisation or sponsors. The title of the menu can also be customised. Viewing Live Broadcasts The video player can be used in portrait or landscape mode. In both modes, the viewer can watch the broadcast, see and contribute to comments, and see and respond to polls. Viewing On-demand Videos When the user taps on a video, the video begins playing at the beginning, or if this video has already been partially viewed, it will begin playing at the last point the viewer watched. The Antourage Widget keeps track of which videos the user has seen. Each video shows the name of the video, name of the broadcaster, total time, and total view count. Display Name In order to contribute to the comments, a user must have an identity in our system, as well as a Display Name that shows in the comments stream. Since not all host apps require a username, we ask users to create a Display Name the first time they try to chat. If the host app does require users to create a username, we can turn off this feature. Comments Comments are contributed by viewers of the live broadcast only. When a video is being watched later as VOD, these comments may be displayed, but cannot be added to. The broadcaster has the ability to review comments on a video and delete ones that they deem to be unacceptable. Antourage administration also has this ability. Polls Polls are created by the broadcaster, and sent out during a live broadcast. They appear on the screen when they are first pushed out to the audience, and viewers can respond or simply close the poll if they do not want to answer. If they answer, they are shown the results right away, and they can see updated results as they come in. These polls are sponsorable and images can be uploaded from the web application so that they surface on behalf of all broadcasters. This uploaded images can also be clickable and link to web pages for special offers or further sponsor activation. The Curtain The curtain feature is supposed to mimic the purpose of a curtain at the theatre. To serve a business purpose such as sponsor exposure or ticket sales, a curtain be lowered at any time. Alternatively, a user can also use the curtain to hide what they are streaming whilst they prepare simulcasts or perform duties off camera. Multiple curtains can be uploaded at the same time, therefore different messages/sponsors that you can be ready to raise awareness of when ready. Curation Content can only be created by those who have been actively been given access to stream by the administrator of our partner. Furthermore, with this access, broadcasters can only stream to the specific channels that they have been granted access to stream to. Third Party Technology To support our functionality, we use a few third-party services and applications. Firebase: used for push notifications, comments and polls. Amazon Media Live: used for streaming and hosting our content","title":"Overview"},{"location":"index.html#antourage-sdk-features","text":"The Antourage Widget is designed to work as a self-contained \u2018widget\u2019 within a host app. Once opened, the widget launches a micro-content vertical that includes live broadcasts, on-demand videos, and image posts. This content is captured by our mobile Broadcaster application or 3rd party input software. Antourage is a mobile and web view experience designed for viewing of real-time and near real-time micro-content.","title":"Antourage SDK Features"},{"location":"index.html#magnetic-widget","text":"The entry point for a user is the magnetic button that appears on the host app. Usually hosted on the main screen, however the button can appear in more than one place. This widget can appear in multiple states.","title":"Magnetic Widget"},{"location":"index.html#resting","text":"If there are new content, the widget will be in a \u201cresting\u201d state. When a user clicks the widget in its resting state, they are directed to the main menu of the widget.","title":"\"Resting\""},{"location":"index.html#live","text":"When a broadcaster starts streaming a live video, the button changes state and animates. The live video can be seen inside the widget and the \u201cLIVE\u201d tag appears. If a user taps the widget whilst in this state, they are taken directly to the live broadcast.","title":"\"LIVE\""},{"location":"index.html#new","text":"When there isn\u2019t a live video, but there is unseen content, the widget animates with a \u201cNEW\u201d tag. If a user clicks the widget at this point, they will subsequently see the main menu.","title":"\"NEW\""},{"location":"index.html#the-main-menu","text":"The main menu allows the user to navigate through multiple live and new videos. Whilst navigating through the videos, if they stop scolling a video will play without sound. If a user clicks on the comment or poll icon below any video they will be taken directly to the chat or poll within that video so that they can contribute immediately. The main menu can also be customised, by editing the logo in the corner of the screen to surface the organisation or sponsors. The title of the menu can also be customised.","title":"The Main Menu"},{"location":"index.html#viewing-live-broadcasts","text":"The video player can be used in portrait or landscape mode. In both modes, the viewer can watch the broadcast, see and contribute to comments, and see and respond to polls.","title":"Viewing Live Broadcasts"},{"location":"index.html#viewing-on-demand-videos","text":"When the user taps on a video, the video begins playing at the beginning, or if this video has already been partially viewed, it will begin playing at the last point the viewer watched. The Antourage Widget keeps track of which videos the user has seen. Each video shows the name of the video, name of the broadcaster, total time, and total view count.","title":"Viewing On-demand Videos"},{"location":"index.html#display-name","text":"In order to contribute to the comments, a user must have an identity in our system, as well as a Display Name that shows in the comments stream. Since not all host apps require a username, we ask users to create a Display Name the first time they try to chat. If the host app does require users to create a username, we can turn off this feature.","title":"Display Name"},{"location":"index.html#comments","text":"Comments are contributed by viewers of the live broadcast only. When a video is being watched later as VOD, these comments may be displayed, but cannot be added to. The broadcaster has the ability to review comments on a video and delete ones that they deem to be unacceptable. Antourage administration also has this ability.","title":"Comments"},{"location":"index.html#polls","text":"Polls are created by the broadcaster, and sent out during a live broadcast. They appear on the screen when they are first pushed out to the audience, and viewers can respond or simply close the poll if they do not want to answer. If they answer, they are shown the results right away, and they can see updated results as they come in. These polls are sponsorable and images can be uploaded from the web application so that they surface on behalf of all broadcasters. This uploaded images can also be clickable and link to web pages for special offers or further sponsor activation.","title":"Polls"},{"location":"index.html#the-curtain","text":"The curtain feature is supposed to mimic the purpose of a curtain at the theatre. To serve a business purpose such as sponsor exposure or ticket sales, a curtain be lowered at any time. Alternatively, a user can also use the curtain to hide what they are streaming whilst they prepare simulcasts or perform duties off camera. Multiple curtains can be uploaded at the same time, therefore different messages/sponsors that you can be ready to raise awareness of when ready.","title":"The Curtain"},{"location":"index.html#curation","text":"Content can only be created by those who have been actively been given access to stream by the administrator of our partner. Furthermore, with this access, broadcasters can only stream to the specific channels that they have been granted access to stream to.","title":"Curation"},{"location":"index.html#third-party-technology","text":"To support our functionality, we use a few third-party services and applications. Firebase: used for push notifications, comments and polls. Amazon Media Live: used for streaming and hosting our content","title":"Third Party Technology"},{"location":"localization.html","text":"Localization By default the Android widget will use the device language. English, Swedish and Serbian are availabe. More to come. On iOS we use the application language. If you want to force app to use language that differs from current one - you can use methods below: iOS You can set localization by using a code below: Antourage . shared . widgetLocale = . english //.swedish Android You can set localization by executing setLocale in antourage fab object. antfab . setLocale ( \"en\" ) // or \"sv\" React Native You can set localization by setting widgetLocale property in antourage view componet. import AntourageView from 'antourage-react-native' ; // ... < AntourageView widgetLocale = { 'en' } /> // or \"sv\" Capacitor (Ionic) If you want to force app to use language that differs from current one - you can use methods below: import { Plugins } from '@capacitor/core' ; const { Antourage } = Plugins ; Antourage . setLocale ({ locale : \"en\" }); // or \"sv\"","title":"Localization"},{"location":"localization.html#localization","text":"By default the Android widget will use the device language. English, Swedish and Serbian are availabe. More to come. On iOS we use the application language. If you want to force app to use language that differs from current one - you can use methods below: iOS You can set localization by using a code below: Antourage . shared . widgetLocale = . english //.swedish Android You can set localization by executing setLocale in antourage fab object. antfab . setLocale ( \"en\" ) // or \"sv\" React Native You can set localization by setting widgetLocale property in antourage view componet. import AntourageView from 'antourage-react-native' ; // ... < AntourageView widgetLocale = { 'en' } /> // or \"sv\" Capacitor (Ionic) If you want to force app to use language that differs from current one - you can use methods below: import { Plugins } from '@capacitor/core' ; const { Antourage } = Plugins ; Antourage . setLocale ({ locale : \"en\" }); // or \"sv\"","title":"Localization"},{"location":"push.html","text":"Push Notifications Subscription Subscription and unsubscription is handled by our partners, not by the Antourage dev team. If any of our partners have push notification implemented in their system, they should provide us with the POST endpoint. Antourage backend services will send the following JSON payload to this endpoint: { \"title\" : \"some title\" , \"body\" : \"some body\" , \"source\" : \"antourage\" } Sending Push Notifications Antourage backend will sends POST request only if new content is available. Sending push notifications is handled by our partners infrastructure. Mobile Handling Push Notifications By tapping on Push notifications from Antourage, the application should show the Antourage feed screen. iOS To open directly the Feed screen from the push notification interaction handler just run showFeed() and it will be presented as modal. import Antourage func userNotificationCenter ( _ center : UNUserNotificationCenter , didReceive response : UNNotificationResponse , withCompletionHandler completionHandler : @ escaping () -> Void ) { let userInfo = response . notification . request . content . userInfo if let category = userInfo [ \"category\" ] as ? String , category == \"antourage\" { Antourage . shared . showFeed () } } Android To open directly Feed screen from received push notification add this to your \"show notification\" method. val intent = Intent ( this , AntourageActivity :: class . java ) intent . addFlags ( Intent . FLAG_ACTIVITY_CLEAR_TOP or Intent . FLAG_ACTIVITY_SINGLE_TOP ) val pendingIntent = PendingIntent . getActivity ( this , 0 /* Request code */ , intent , PendingIntent . FLAG_ONE_SHOT ) After that pass pending intent to your notification builder . setContentIntent ( pendingIntent ) React Native To open directly the Feed screen from the push notification interaction handler just run showFeed() and it will be presented as modal. import { Antourage } from 'antourage-react-native' ; // ... Antourage . showFeed (); Capacitor (Ionic) To open directly the Feed screen from the push notification interaction handler just run showFeedScreen() and it will be presented as modal. import { Plugins } from '@capacitor/core' ; const { Antourage } = Plugins ; Antourage . showFeedScreen ();","title":"Push notfications"},{"location":"push.html#push-notifications","text":"","title":"Push Notifications"},{"location":"push.html#subscription","text":"Subscription and unsubscription is handled by our partners, not by the Antourage dev team. If any of our partners have push notification implemented in their system, they should provide us with the POST endpoint. Antourage backend services will send the following JSON payload to this endpoint: { \"title\" : \"some title\" , \"body\" : \"some body\" , \"source\" : \"antourage\" }","title":"Subscription"},{"location":"push.html#sending-push-notifications","text":"Antourage backend will sends POST request only if new content is available. Sending push notifications is handled by our partners infrastructure.","title":"Sending Push Notifications"},{"location":"push.html#mobile","text":"","title":"Mobile"},{"location":"push.html#handling-push-notifications","text":"By tapping on Push notifications from Antourage, the application should show the Antourage feed screen. iOS To open directly the Feed screen from the push notification interaction handler just run showFeed() and it will be presented as modal. import Antourage func userNotificationCenter ( _ center : UNUserNotificationCenter , didReceive response : UNNotificationResponse , withCompletionHandler completionHandler : @ escaping () -> Void ) { let userInfo = response . notification . request . content . userInfo if let category = userInfo [ \"category\" ] as ? String , category == \"antourage\" { Antourage . shared . showFeed () } } Android To open directly Feed screen from received push notification add this to your \"show notification\" method. val intent = Intent ( this , AntourageActivity :: class . java ) intent . addFlags ( Intent . FLAG_ACTIVITY_CLEAR_TOP or Intent . FLAG_ACTIVITY_SINGLE_TOP ) val pendingIntent = PendingIntent . getActivity ( this , 0 /* Request code */ , intent , PendingIntent . FLAG_ONE_SHOT ) After that pass pending intent to your notification builder . setContentIntent ( pendingIntent ) React Native To open directly the Feed screen from the push notification interaction handler just run showFeed() and it will be presented as modal. import { Antourage } from 'antourage-react-native' ; // ... Antourage . showFeed (); Capacitor (Ionic) To open directly the Feed screen from the push notification interaction handler just run showFeedScreen() and it will be presented as modal. import { Plugins } from '@capacitor/core' ; const { Antourage } = Plugins ; Antourage . showFeedScreen ();","title":"Handling Push Notifications"},{"location":"widget.html","text":"Get Started with Antourage Viewer SDK The Antourage SDK is the easiest way to integrate your app with Antourage. Our SDK currently works with native iOS , native Android , Capacitor (Ionic) , JavaScript and React Native technologies. For each technology we have prepared a complete guide with code samples. Requirements For a successful integration please find our requirements below and make sure that you are compatible. iOS iOS 11.3+ CocoaPods 1.10.0 or later Landscape orientation support Android Minimum Android SDK: Antourage widget requires a minimum API level of 21; Starting from 0.2.0 version library has migrated to the androidX, so make sure that you have android.useAndroidX=true android.enableJetifier=true in your gradle.properties React Native react-native >= 0.62.2 iOS: iOS 11.3+ CocoaPods 1.10.0 or later Landscape orientation support Android: Minimum Android SDK: Antourage widget requires a minimum API level of 21; Starting from 0.2.0 version library has migrated to the androidX, so make sure that you have android.useAndroidX=true android.enableJetifier=true in your gradle.properties Capacitor (Ionic) Capacitor iOS: iOS 11.3+ CocoaPods 1.10.0 or later Landscape orientation support Android: Minimum Android SDK: Antourage widget requires a minimum API level of 21; Starting from 0.2.0 version library has migrated to the androidX, so make sure that you have android.useAndroidX=true android.enableJetifier=true in your gradle.properties JavaScript Supported Browsers: Chrome - 2 last versions Safari - 2 last major versions Firefox - 2 last versions + ESR Edge - 16-18 and 2 last Chromium-based versions Installation iOS The Antourage SDK for iOS is available as a CocoaPods pod . CocoaPods is an open source dependency manager for Swift and Objective-C Cocoa projects. If you don't already have the CocoaPods installed, see the CocoaPods Getting Started guide . Create a Podfile if you don't already have one: cd your-project-directory pod init Add the Antourage pod to your Podfile: platform :ios , '11.3' pod 'Antourage' # If you want to use a beta version, also specify the repo and a version tag pod 'Antourage' , :git => 'https://github.com/antourage/viewer-sdk-ios' , :tag => 'v3.0.0-beta' Install the pods: pod install Android Add: compileOptions { targetCompatibility 1.8 sourceCompatibility 1.8 } and dependencies { ... implementation 'com.github.antourage:AntViewer-android:{latest_version}}' } React Native Antourage SDK is installed with npm (Node Package Manager) . To install the SDK go through steps below: Step 1 npm i antourage-react-native --save Step 2 Open ios directory from terminal and install pods: cd ios pod install Capacitor (Ionic) Antourage SDK is installed with npm (Node Package Manager) . To install the SDK go through steps below: Step 1 npm i antourage-capacitor --save Step 2 npx cap sync Android Additional Configuration You should find app build.gradle file and add maven { url 'https://jitpack.io' } to the repositories block. You should create variable private AntourageCapacitor antouragePlugin; , add import com.antourage.plugin.AntourageCapacitor; , add(AntourageCapacitor.class); and initialize antouragePlugin with antouragePlugin = (AntourageCapacitor) getBridge().getPlugin(AntourageCapacitor.class.getAnnotation(NativePlugin.class).name()).getInstance(); in MainActivity class. Also you need to add antouragePlugin.onPause(); and antouragePlugin.onResume(); to overriden onPause and onResume methods accordingly, as you see below: npx cap sync Usage Add an Antourage config file Please be sure that you already have the config file, otherwise please contact Antourage to request one for your application. The file contains a data for authorization (app client ids, redirect urls, etc.) iOS Move your Antourage-Info.plist config file into your Xcode project. If prompted, select to add the config file to all targets. Android Move your antourage_info.json config file into your project's assets folder. If there's no assets folder in your project - simply create it at app/src/main/. JavaScript Place your config file antourage_info.json in your website root directory. This folder is often named public_html, htdocs, www, or wwwroot, depending on your web host and settings. Initialization iOS Import the Antourage module in your AppDelegate: import Antourage Configure an Antourage shared instance, usually in your app's application(_:didFinishLaunchingWithOptions:) method: Antourage . configure () Android You have to configure AntourageFab singleton before calling other methods. AntourageFab . configure ( yourContext ) React Native You should to try call this method once per app lifecycle. import { Antourage } from 'antourage-react-native' ; // ... Antourage . configure (); Capacitor (Ionic) You should try to call this method once per app lifecycle. import { Plugins } from '@capacitor/core' ; const { Antourage } = Plugins ; Antourage . configure (); Add UI part The main feature of Antourage SDK is the widget \u2014 a simple button that should be placed on your screen. The widget will fully work only after successful configuration. If you need to know when the Feed screen appears and disappears you can use callbacks. iOS import Antourage class ViewController : UIViewController { var widget : Antourage ! { didSet { view . addSubview ( widget . view ) } } override func viewDidLoad () { super . viewDidLoad () widget = Antourage . shared } } Android Add antourage widget view to the layout: val antfab = AntourageFab ( yourContext ) antfab . showFab ( yourActivity ) Also override onResume and onPause in activity that contains widget: override fun onResume () { super . onResume () antfab . onResume () } override fun onPause () { super . onPause () antfab . onPause () } React Native import AntourageView from 'antourage-react-native' ; // ... render () { return ( < View style = { styles . container } > < Text style = { styles . welcome } > Welcome to React Native !< /Text> < Text style = { styles . instructions } > To get started , edit App . js < /Text> < Text style = { styles . instructions } > { instructions } < /Text> < AntourageView onViewerAppear = {() => console . log ( 'Appeared' )} onViewerDisappear = {() => console . log ( 'Disappeared' )} widgetPosition = { 'bottomRight' } widgetLocale = { 'en' } widgetMargins = {{ vertical : 50 , horizontal : 20 }} /> < /View> ); } Capacitor (Ionic) Antourage widget works as overlay over Capacitor web view. You can show and hide it whenever you want (navigation handlers or component lifecycle etc). import { Plugins } from '@capacitor/core' ; const { Antourage } = Plugins ; Antourage . showWidget (); Antourage . hideWidget (); JavaScript The following code should be added to a web-site: < link href = \"https://antourage.com/widget.{version}.css\" rel = \"stylesheet\" > < script defer src = \"https://antourage.com/widget.{version}.js\" ></ script > < script defer src = \"https://antourage.com/widget-auth.{version}.js\" ></ script > It is recommended to place this code at the end of <head> or <body> element. The script will inject all other necessary elements. The actual widget operates inside of iframe. This data will be provided before integration: version - the version number of the application you are adding Property Type Description onViewerAppear Closure Called when the user opens the widget controller. onViewerDisappear Closure Called when the user dismisses the widget controller. Orientation (iOS only) Your app may support only portrait orientation, but our widget should be able to use landscape orientation while playing video. First of all you should enable ladnscape orientation in xcode project. iOS You can lock orientation for specific controllers by adding code below to them: override var supportedInterfaceOrientations : UIInterfaceOrientationMask { return [. portrait ] } React Native You can use some third-party library ( react-native-orientation-locker ) to be able to lock orientations occasionally depending on the content. Just add two listeners to handle widget state: import AntourageView from 'antourage-react-native' ; import Orientation from 'react-native-orientation-locker' ; // ... < AntourageView onViewerAppear = {() => Orientation . unlockAllOrientations () } onViewerDisappear = {() => Orientation . lockToPortrait () } /> Capacitor (Ionic) First approach: You can use cordova-plugin-screen-orientation to be able to lock orientations occasionally depending on the content. Just add two listeners to handle widget state: import { Plugins } from '@capacitor/core' ; const { Antourage } = Plugins ; Antourage . addListener ( 'onViewerAppear' , ( info : any ) => { console . log ( 'viewer did appear' ); // window.screen.orientation.unlock(); }); Antourage . addListener ( 'onViewerDisappear' , ( info : any ) => { console . log ( 'viewer did disappear' ); //window.screen.orientation.lock('portrait'); }); Second approach (a bit easier): We can lock main capacitor controller to portrait from plugin (but application will support lanscape). It means that your ionic UI that runs in webView will be in portrait only, but everthing outside capacitor controller (Antrourage screens, or some native modals etc) will be able to use landscape. You just need to call this function after your app starts: import { Plugins } from '@capacitor/core' ; const { Antourage } = Plugins ; Antourage . lockCapacitorControllerToPortrait (); Examples Android To run the example project, clone the Antourage repo , open project in Android Studio and run app module. React Native To run the example project, clone the Antourage repo first. Run yarn bootstrap in the root directory to install the required dependencies for each package. While developing, you can run the example app for testing needs. To start the packager: yarn example start To run the example app on Android: yarn example android To run the example app on iOS: yarn example ios Capacitor (Ionic) To run the example project, clone the Antourage repo first. And run code below from the example directory: npm i npx cap sync ionic capacitor run ios --livereload --external","title":"Get Started"},{"location":"widget.html#get-started-with-antourage-viewer-sdk","text":"The Antourage SDK is the easiest way to integrate your app with Antourage. Our SDK currently works with native iOS , native Android , Capacitor (Ionic) , JavaScript and React Native technologies. For each technology we have prepared a complete guide with code samples.","title":"Get Started with Antourage Viewer SDK"},{"location":"widget.html#requirements","text":"For a successful integration please find our requirements below and make sure that you are compatible. iOS iOS 11.3+ CocoaPods 1.10.0 or later Landscape orientation support Android Minimum Android SDK: Antourage widget requires a minimum API level of 21; Starting from 0.2.0 version library has migrated to the androidX, so make sure that you have android.useAndroidX=true android.enableJetifier=true in your gradle.properties React Native react-native >= 0.62.2 iOS: iOS 11.3+ CocoaPods 1.10.0 or later Landscape orientation support Android: Minimum Android SDK: Antourage widget requires a minimum API level of 21; Starting from 0.2.0 version library has migrated to the androidX, so make sure that you have android.useAndroidX=true android.enableJetifier=true in your gradle.properties Capacitor (Ionic) Capacitor iOS: iOS 11.3+ CocoaPods 1.10.0 or later Landscape orientation support Android: Minimum Android SDK: Antourage widget requires a minimum API level of 21; Starting from 0.2.0 version library has migrated to the androidX, so make sure that you have android.useAndroidX=true android.enableJetifier=true in your gradle.properties JavaScript Supported Browsers: Chrome - 2 last versions Safari - 2 last major versions Firefox - 2 last versions + ESR Edge - 16-18 and 2 last Chromium-based versions","title":"Requirements"},{"location":"widget.html#installation","text":"iOS The Antourage SDK for iOS is available as a CocoaPods pod . CocoaPods is an open source dependency manager for Swift and Objective-C Cocoa projects. If you don't already have the CocoaPods installed, see the CocoaPods Getting Started guide . Create a Podfile if you don't already have one: cd your-project-directory pod init Add the Antourage pod to your Podfile: platform :ios , '11.3' pod 'Antourage' # If you want to use a beta version, also specify the repo and a version tag pod 'Antourage' , :git => 'https://github.com/antourage/viewer-sdk-ios' , :tag => 'v3.0.0-beta' Install the pods: pod install Android Add: compileOptions { targetCompatibility 1.8 sourceCompatibility 1.8 } and dependencies { ... implementation 'com.github.antourage:AntViewer-android:{latest_version}}' } React Native Antourage SDK is installed with npm (Node Package Manager) . To install the SDK go through steps below: Step 1 npm i antourage-react-native --save Step 2 Open ios directory from terminal and install pods: cd ios pod install Capacitor (Ionic) Antourage SDK is installed with npm (Node Package Manager) . To install the SDK go through steps below: Step 1 npm i antourage-capacitor --save Step 2 npx cap sync Android Additional Configuration You should find app build.gradle file and add maven { url 'https://jitpack.io' } to the repositories block. You should create variable private AntourageCapacitor antouragePlugin; , add import com.antourage.plugin.AntourageCapacitor; , add(AntourageCapacitor.class); and initialize antouragePlugin with antouragePlugin = (AntourageCapacitor) getBridge().getPlugin(AntourageCapacitor.class.getAnnotation(NativePlugin.class).name()).getInstance(); in MainActivity class. Also you need to add antouragePlugin.onPause(); and antouragePlugin.onResume(); to overriden onPause and onResume methods accordingly, as you see below: npx cap sync","title":"Installation"},{"location":"widget.html#usage","text":"","title":"Usage"},{"location":"widget.html#add-an-antourage-config-file","text":"Please be sure that you already have the config file, otherwise please contact Antourage to request one for your application. The file contains a data for authorization (app client ids, redirect urls, etc.) iOS Move your Antourage-Info.plist config file into your Xcode project. If prompted, select to add the config file to all targets. Android Move your antourage_info.json config file into your project's assets folder. If there's no assets folder in your project - simply create it at app/src/main/. JavaScript Place your config file antourage_info.json in your website root directory. This folder is often named public_html, htdocs, www, or wwwroot, depending on your web host and settings.","title":"Add an Antourage config file"},{"location":"widget.html#initialization","text":"iOS Import the Antourage module in your AppDelegate: import Antourage Configure an Antourage shared instance, usually in your app's application(_:didFinishLaunchingWithOptions:) method: Antourage . configure () Android You have to configure AntourageFab singleton before calling other methods. AntourageFab . configure ( yourContext ) React Native You should to try call this method once per app lifecycle. import { Antourage } from 'antourage-react-native' ; // ... Antourage . configure (); Capacitor (Ionic) You should try to call this method once per app lifecycle. import { Plugins } from '@capacitor/core' ; const { Antourage } = Plugins ; Antourage . configure ();","title":"Initialization"},{"location":"widget.html#add-ui-part","text":"The main feature of Antourage SDK is the widget \u2014 a simple button that should be placed on your screen. The widget will fully work only after successful configuration. If you need to know when the Feed screen appears and disappears you can use callbacks. iOS import Antourage class ViewController : UIViewController { var widget : Antourage ! { didSet { view . addSubview ( widget . view ) } } override func viewDidLoad () { super . viewDidLoad () widget = Antourage . shared } } Android Add antourage widget view to the layout: val antfab = AntourageFab ( yourContext ) antfab . showFab ( yourActivity ) Also override onResume and onPause in activity that contains widget: override fun onResume () { super . onResume () antfab . onResume () } override fun onPause () { super . onPause () antfab . onPause () } React Native import AntourageView from 'antourage-react-native' ; // ... render () { return ( < View style = { styles . container } > < Text style = { styles . welcome } > Welcome to React Native !< /Text> < Text style = { styles . instructions } > To get started , edit App . js < /Text> < Text style = { styles . instructions } > { instructions } < /Text> < AntourageView onViewerAppear = {() => console . log ( 'Appeared' )} onViewerDisappear = {() => console . log ( 'Disappeared' )} widgetPosition = { 'bottomRight' } widgetLocale = { 'en' } widgetMargins = {{ vertical : 50 , horizontal : 20 }} /> < /View> ); } Capacitor (Ionic) Antourage widget works as overlay over Capacitor web view. You can show and hide it whenever you want (navigation handlers or component lifecycle etc). import { Plugins } from '@capacitor/core' ; const { Antourage } = Plugins ; Antourage . showWidget (); Antourage . hideWidget (); JavaScript The following code should be added to a web-site: < link href = \"https://antourage.com/widget.{version}.css\" rel = \"stylesheet\" > < script defer src = \"https://antourage.com/widget.{version}.js\" ></ script > < script defer src = \"https://antourage.com/widget-auth.{version}.js\" ></ script > It is recommended to place this code at the end of <head> or <body> element. The script will inject all other necessary elements. The actual widget operates inside of iframe. This data will be provided before integration: version - the version number of the application you are adding Property Type Description onViewerAppear Closure Called when the user opens the widget controller. onViewerDisappear Closure Called when the user dismisses the widget controller.","title":"Add UI part"},{"location":"widget.html#orientation-ios-only","text":"Your app may support only portrait orientation, but our widget should be able to use landscape orientation while playing video. First of all you should enable ladnscape orientation in xcode project. iOS You can lock orientation for specific controllers by adding code below to them: override var supportedInterfaceOrientations : UIInterfaceOrientationMask { return [. portrait ] } React Native You can use some third-party library ( react-native-orientation-locker ) to be able to lock orientations occasionally depending on the content. Just add two listeners to handle widget state: import AntourageView from 'antourage-react-native' ; import Orientation from 'react-native-orientation-locker' ; // ... < AntourageView onViewerAppear = {() => Orientation . unlockAllOrientations () } onViewerDisappear = {() => Orientation . lockToPortrait () } /> Capacitor (Ionic) First approach: You can use cordova-plugin-screen-orientation to be able to lock orientations occasionally depending on the content. Just add two listeners to handle widget state: import { Plugins } from '@capacitor/core' ; const { Antourage } = Plugins ; Antourage . addListener ( 'onViewerAppear' , ( info : any ) => { console . log ( 'viewer did appear' ); // window.screen.orientation.unlock(); }); Antourage . addListener ( 'onViewerDisappear' , ( info : any ) => { console . log ( 'viewer did disappear' ); //window.screen.orientation.lock('portrait'); }); Second approach (a bit easier): We can lock main capacitor controller to portrait from plugin (but application will support lanscape). It means that your ionic UI that runs in webView will be in portrait only, but everthing outside capacitor controller (Antrourage screens, or some native modals etc) will be able to use landscape. You just need to call this function after your app starts: import { Plugins } from '@capacitor/core' ; const { Antourage } = Plugins ; Antourage . lockCapacitorControllerToPortrait ();","title":"Orientation (iOS only)"},{"location":"widget.html#examples","text":"Android To run the example project, clone the Antourage repo , open project in Android Studio and run app module. React Native To run the example project, clone the Antourage repo first. Run yarn bootstrap in the root directory to install the required dependencies for each package. While developing, you can run the example app for testing needs. To start the packager: yarn example start To run the example app on Android: yarn example android To run the example app on iOS: yarn example ios Capacitor (Ionic) To run the example project, clone the Antourage repo first. And run code below from the example directory: npm i npx cap sync ionic capacitor run ios --livereload --external","title":"Examples"}]}