{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Antourage SDK Functional Description The Antourage Widget is designed to work as a self-contained \u2018widget\u2019 within a host app. Once opened, the widget launches a micro-content vertical that includes live broadcasts and on-demand videos. This content is captured by our mobile Broadcaster application. Antourage is mobile first and designed for the creation and viewing of realtime and near real time micro-content. Magnetic Widget The entry point for a user is the magnetic button that appears on the host app. Usually on the main screen, but flexible, the button can appear in more than one place. This magnetic widget can appear in multiple states. \"Resting\" If there are no live videos or new VOD\u2019s to watch the widget will be in a \u201cresting\u201d state. When a user clicks the widget in its resting state, they are directed to the main menu of the widget. \"LIVE\" When a broadcaster starts streaming live video, the button changes state and animates. The live video can be seen inside the widget and \u201cLIVE\u201d tag appears. If a user taps the widget whilst in this state, they are taken directly to the live broadcast. \"NEW\" When there isn\u2019t a live video, but there are unwatched VOD\u2019s the widget animates with a \u201cNEW\u201d tag. If a user clicks the widget at this point, they will subsequently see the main menu. The Main Menu The main menu allows the user to navigate through multiple live and new videos. Whilst navigating through the videos, if they stop scolling a video will play without sound. If a user clicks on the comment or poll icon below any video they will be taken directly to the chat or poll within that video so that they can contribute immediately. The main menu can also be customised, by editing the logo in the corner of the screen to surface the organisation or sponsors. The title of the menu can also be customised. Viewing Live Broadcasts The video player may be used in portrait or landscape mode. In both modes, the viewer can watch the broadcast, see and contribute to comments, and see and respond to polls. Viewing On-demand videos When the user taps on a video, the video begins playing at the beginning, or if this video has already been partially viewed, it will begin playing at the last point the viewer watched. The Antourage Widget keeps track of which videos the user has seen, and updates the number on the magnetic button accordingly. Each video shows the name of the video, name of the broadcaster, total time, and total view count. Display Name In order to contribute to the comments, a user must have an identity in our system, as well as a Display Name that shows in the comments stream. Since not all host apps require a username, we ask users to create a Display Name the first time they try to chat. If the host app does require users to create a username, we can turn off this feature. Comments Comments are contributed by viewers of the live broadcast only. When a video is being watched later as VOD, these comments may be displayed, but cannot be added to. The broadcaster has the ability to review comments on a video and delete ones that they deem to be unacceptable. Antourage administration also has this ability. Polls Polls are created by the broadcaster, and sent out during a live broadcast. They appear on the screen when they are first pushed out to the audience, and viewers can respond or simply close the poll if they do not want to answer. If they answer, they are shown the results right away, and they can see updated results as they come in. These polls are sponsorable and images can be uploaded from the web application so that they surface on behalf of all broadcasters. This uploaded images can also be clickable and link to web pages for special offers or further sponsor activation. The Curtain The curtain feature is supposed to mimic the purpose of a curtain at the theatre. To serve a business purpose such as sponsor exposure or ticket sales, a curtain be lowered at any time. Alternatively, a user can also use the curtain to hide what they are streaming whilst they prepare simulcasts or perform duties off camera. Multiple curtains can be uploaded at the same time, therefore different messages/sponsors that you can be ready to raise awareness of when ready. Curation Content can only be created by those who have been actively been given access to stream by the administrator of our partner. Furthermore, with this access, broadcasters can only stream to the specific channels that they have been granted access to stream to. Third Party Technology To support our functionality, we use a few third-party services and applications. Firebase: used for push notifications, comments and polls. Amazon Media Live: used for streaming and hosting our content","title":"Overview"},{"location":"#antourage-sdk-functional-description","text":"The Antourage Widget is designed to work as a self-contained \u2018widget\u2019 within a host app. Once opened, the widget launches a micro-content vertical that includes live broadcasts and on-demand videos. This content is captured by our mobile Broadcaster application. Antourage is mobile first and designed for the creation and viewing of realtime and near real time micro-content.","title":"Antourage SDK Functional Description"},{"location":"#magnetic-widget","text":"The entry point for a user is the magnetic button that appears on the host app. Usually on the main screen, but flexible, the button can appear in more than one place. This magnetic widget can appear in multiple states.","title":"Magnetic Widget"},{"location":"#resting","text":"If there are no live videos or new VOD\u2019s to watch the widget will be in a \u201cresting\u201d state. When a user clicks the widget in its resting state, they are directed to the main menu of the widget.","title":"\"Resting\""},{"location":"#live","text":"When a broadcaster starts streaming live video, the button changes state and animates. The live video can be seen inside the widget and \u201cLIVE\u201d tag appears. If a user taps the widget whilst in this state, they are taken directly to the live broadcast.","title":"\"LIVE\""},{"location":"#new","text":"When there isn\u2019t a live video, but there are unwatched VOD\u2019s the widget animates with a \u201cNEW\u201d tag. If a user clicks the widget at this point, they will subsequently see the main menu.","title":"\"NEW\""},{"location":"#the-main-menu","text":"The main menu allows the user to navigate through multiple live and new videos. Whilst navigating through the videos, if they stop scolling a video will play without sound. If a user clicks on the comment or poll icon below any video they will be taken directly to the chat or poll within that video so that they can contribute immediately. The main menu can also be customised, by editing the logo in the corner of the screen to surface the organisation or sponsors. The title of the menu can also be customised.","title":"The Main Menu"},{"location":"#viewing-live-broadcasts","text":"The video player may be used in portrait or landscape mode. In both modes, the viewer can watch the broadcast, see and contribute to comments, and see and respond to polls.","title":"Viewing Live Broadcasts"},{"location":"#viewing-on-demand-videos","text":"When the user taps on a video, the video begins playing at the beginning, or if this video has already been partially viewed, it will begin playing at the last point the viewer watched. The Antourage Widget keeps track of which videos the user has seen, and updates the number on the magnetic button accordingly. Each video shows the name of the video, name of the broadcaster, total time, and total view count.","title":"Viewing On-demand videos"},{"location":"#display-name","text":"In order to contribute to the comments, a user must have an identity in our system, as well as a Display Name that shows in the comments stream. Since not all host apps require a username, we ask users to create a Display Name the first time they try to chat. If the host app does require users to create a username, we can turn off this feature.","title":"Display Name"},{"location":"#comments","text":"Comments are contributed by viewers of the live broadcast only. When a video is being watched later as VOD, these comments may be displayed, but cannot be added to. The broadcaster has the ability to review comments on a video and delete ones that they deem to be unacceptable. Antourage administration also has this ability.","title":"Comments"},{"location":"#polls","text":"Polls are created by the broadcaster, and sent out during a live broadcast. They appear on the screen when they are first pushed out to the audience, and viewers can respond or simply close the poll if they do not want to answer. If they answer, they are shown the results right away, and they can see updated results as they come in. These polls are sponsorable and images can be uploaded from the web application so that they surface on behalf of all broadcasters. This uploaded images can also be clickable and link to web pages for special offers or further sponsor activation.","title":"Polls"},{"location":"#the-curtain","text":"The curtain feature is supposed to mimic the purpose of a curtain at the theatre. To serve a business purpose such as sponsor exposure or ticket sales, a curtain be lowered at any time. Alternatively, a user can also use the curtain to hide what they are streaming whilst they prepare simulcasts or perform duties off camera. Multiple curtains can be uploaded at the same time, therefore different messages/sponsors that you can be ready to raise awareness of when ready.","title":"The Curtain"},{"location":"#curation","text":"Content can only be created by those who have been actively been given access to stream by the administrator of our partner. Furthermore, with this access, broadcasters can only stream to the specific channels that they have been granted access to stream to.","title":"Curation"},{"location":"#third-party-technology","text":"To support our functionality, we use a few third-party services and applications. Firebase: used for push notifications, comments and polls. Amazon Media Live: used for streaming and hosting our content","title":"Third Party Technology"},{"location":"localization/","text":"Localization By default android widget will use device's language: Swedish if it is chosen as device\u2019s default language and English in other cases. On iOS side we use application's language. iOS You can set localization buy using a code below: AntWidget . shared . widgetLocale = . english //.swedish Android You can set localization buy executing setLocale in antourage fab object. antfab . setLocale ( \"en\" ) // or \"sv\" React native You can set localization buy setting widgetLocale property in antourage view componet. import AntourageView from 'react-native-antourage' ; // ... < AntourageView widgetLocale = { 'en' } /> // or \"sv\" Capacitor(Ionic) If you want to force app to use language that differs from current one - you can use methods below: import { Plugins } from '@capacitor/core' ; const { AntViewerPlugin } = Plugins ; AntViewerPlugin . setLocale ({ locale : \"en\" }); // or \"sv\"","title":"Localization"},{"location":"localization/#localization","text":"By default android widget will use device's language: Swedish if it is chosen as device\u2019s default language and English in other cases. On iOS side we use application's language. iOS You can set localization buy using a code below: AntWidget . shared . widgetLocale = . english //.swedish Android You can set localization buy executing setLocale in antourage fab object. antfab . setLocale ( \"en\" ) // or \"sv\" React native You can set localization buy setting widgetLocale property in antourage view componet. import AntourageView from 'react-native-antourage' ; // ... < AntourageView widgetLocale = { 'en' } /> // or \"sv\" Capacitor(Ionic) If you want to force app to use language that differs from current one - you can use methods below: import { Plugins } from '@capacitor/core' ; const { AntViewerPlugin } = Plugins ; AntViewerPlugin . setLocale ({ locale : \"en\" }); // or \"sv\"","title":"Localization"},{"location":"push/","text":"Push notifications Subscription Subscription and unsubscription are handled by our partners, not by Antourage dev team. If partners have PN in their system they should provide us with POST endpoint that will receive next JSON payload: { \"title\" : \"some title\" , \"body\" : \"some body\" , \"source\" : \"antourage\" } In addition, we can add any field to the JSON body that our partners need. Sending Push Notifications Antourage backend will sends POST request only if a new live stream is started. Sending PN is an internal implementation of our partners. Mobile part Handling push notifications By tapping on Push notifications from Antourage, application should show Antourage's Feed screen. We provided a mechanism for implementation without any complication. iOS To open directly the Feed screen from the push notification interaction handler just run showFeed() and it will be presented as modal. import Antourage func userNotificationCenter ( _ center : UNUserNotificationCenter , didReceive response : UNNotificationResponse , withCompletionHandler completionHandler : @ escaping () -> Void ) { let userInfo = response . notification . request . content . userInfo if let category = userInfo [ \"category\" ] as ? String , category == \"antourage\" { AntWidget . shared . showFeed () } Android To open directly Feed screen from received push notification add this to your \"show notification\" method. val intent = Intent ( this , AntourageActivity :: class . java ) intent . addFlags ( Intent . FLAG_ACTIVITY_CLEAR_TOP or Intent . FLAG_ACTIVITY_SINGLE_TOP ) val pendingIntent = PendingIntent . getActivity ( this , 0 /* Request code */ , intent , PendingIntent . FLAG_ONE_SHOT ) After that pass pending intent to your notification builder . setContentIntent ( pendingIntent ) React native To open directly the Feed screen from the push notification interaction handler just run showFeed() and it will be presented as modal. import { Antourage } from 'react-native-antourage' ; // ... Antourage . showFeed (); Capacitor(Ionic) To open directly the Feed screen from the push notification interaction handler just run showFeedScreen() and it will be presented as modal. import { Plugins } from '@capacitor/core' ; const { AntViewerPlugin } = Plugins ; AntViewerPlugin . showFeedScreen ();","title":"Push notfications"},{"location":"push/#push-notifications","text":"","title":"Push notifications"},{"location":"push/#subscription","text":"Subscription and unsubscription are handled by our partners, not by Antourage dev team. If partners have PN in their system they should provide us with POST endpoint that will receive next JSON payload: { \"title\" : \"some title\" , \"body\" : \"some body\" , \"source\" : \"antourage\" } In addition, we can add any field to the JSON body that our partners need.","title":"Subscription"},{"location":"push/#sending-push-notifications","text":"Antourage backend will sends POST request only if a new live stream is started. Sending PN is an internal implementation of our partners.","title":"Sending Push Notifications"},{"location":"push/#mobile-part","text":"","title":"Mobile part"},{"location":"push/#handling-push-notifications","text":"By tapping on Push notifications from Antourage, application should show Antourage's Feed screen. We provided a mechanism for implementation without any complication. iOS To open directly the Feed screen from the push notification interaction handler just run showFeed() and it will be presented as modal. import Antourage func userNotificationCenter ( _ center : UNUserNotificationCenter , didReceive response : UNNotificationResponse , withCompletionHandler completionHandler : @ escaping () -> Void ) { let userInfo = response . notification . request . content . userInfo if let category = userInfo [ \"category\" ] as ? String , category == \"antourage\" { AntWidget . shared . showFeed () } Android To open directly Feed screen from received push notification add this to your \"show notification\" method. val intent = Intent ( this , AntourageActivity :: class . java ) intent . addFlags ( Intent . FLAG_ACTIVITY_CLEAR_TOP or Intent . FLAG_ACTIVITY_SINGLE_TOP ) val pendingIntent = PendingIntent . getActivity ( this , 0 /* Request code */ , intent , PendingIntent . FLAG_ONE_SHOT ) After that pass pending intent to your notification builder . setContentIntent ( pendingIntent ) React native To open directly the Feed screen from the push notification interaction handler just run showFeed() and it will be presented as modal. import { Antourage } from 'react-native-antourage' ; // ... Antourage . showFeed (); Capacitor(Ionic) To open directly the Feed screen from the push notification interaction handler just run showFeedScreen() and it will be presented as modal. import { Plugins } from '@capacitor/core' ; const { AntViewerPlugin } = Plugins ; AntViewerPlugin . showFeedScreen ();","title":"Handling push notifications"},{"location":"widget/","text":"Get Started - Antourage SDK The Antourage SDK is the easiest way to integrate your app with Antourage. Our SDK currently works with native iOS , native Android , Capacitor(Ionic) , and React Native technologies. For each technology we prepared profound guide with code semples. Requirements For successful integration please see our requirements below and be sure that everything compatible. iOS iOS 11.3 + Cocoapods Landscape orientation support Android Minimum Android SDK: Antourage widget requires a minimum API level of 21; Starting from 0.2.0 version library has migrated to the androidX, so make sure that you have android.useAndroidX=true android.enableJetifier=true in your gradle.properties React native react-native >= 0.62.2 iOS: iOS 11.3 + Cocoapods Landscape orientation support Android: Minimum Android SDK: Antourage widget requires a minimum API level of 21; Starting from 0.2.0 version library has migrated to the androidX, so make sure that you have android.useAndroidX=true android.enableJetifier=true in your gradle.properties Capacitor(Ionic) Capacitor iOS: iOS 11.3 + Cocoapods Landscape orientation support Android: Minimum Android SDK: Antourage widget requires a minimum API level of 21; Starting from 0.2.0 version library has migrated to the androidX, so make sure that you have android.useAndroidX=true android.enableJetifier=true in your gradle.properties Installation iOS The Antourage SDK for iOS is available as a CocoaPods pod . CocoaPods is an open source dependency manager for Swift and Objective-C Cocoa projects. If you don't already have the CocoaPods tool, install it on macOS by running the following command from the terminal. For details, see the CocoaPods Getting Started guide . brew install cocoapods 1. Add the dependency for Antourage to your project's Podfile: pod 'Antourage' 2. Run $ pod install to install the dependency Also please make sure to use Cocoapods v1.10 and later. Note: You may need to update the CocoaPods Master Spec Repo by running $ pod repo update master in order to fetch the latest specs for Antourage. Android Add: compileOptions { targetCompatibility 1.8 sourceCompatibility 1.8 } and dependencies { ... implementation 'com.github.antourage:AntViewer-android:2.0.24' } React native Antourage SDK is installed with npm (Node Package Manager) . To install the SDK go through steps below: Step 1 npm i react-native-antourage --save Step 2 Open ios directory from terminal and install pods: cd ios pod install Capacitor(Ionic) Antourage SDK is installed with npm (Node Package Manager) . To install the SDK go through steps below: Step 1 npm i antourage_capacitor --save Step 2 npx cap sync Android additional configuration You should find app build.gradle file and add maven { url 'https://jitpack.io' } to the repositories block. You should create variable private AntViewerPlugin antPlugin; , add import com.antourage.plugin.AntViewerPlugin; , add(AntViewerPlugin.class); and initialize antPlugin with antPlugin = (AntViewerPlugin) getBridge().getPlugin(AntViewerPlugin.class.getSimpleName()).getInstance(); in MainActivity class. Also you need to add antPlugin.onPause(); and antPlugin.onResume(); to overriden onPause and onResume methods accordingly, as you see below: npx cap sync Usage Authentication Please be sure that you already have the API key for Antourage, otherwise please contact Antourage to request one for your application. Optionally you can provide refUserId for user identification in our system and nickname to pre-setup it for chat (user can change it any time after). iOS It's static method (no need object init), you can use it anywhere you want (login/app start etc). import Antourage AntWidget . authWith ( apiKey : \"put_your_apiKey_there\" , refUserId : \"put_user_id_from_your_base_or_nil\" , nickname : \"put_user_nickname_from_your_base_or_nil\" ) Android It's static method (no need object init), you can use it anywhere you want (login/app start etc). AntourageFab . authWith ( \"put_your_apiKey_there\" , \"put_user_id_from_your_base_or_null\" , \"put_user_nickname_from_your_base_or_null\" , context ) React native You should to try call this method once per app lifecycle. import { Antourage } from 'react-native-antourage' ; // ... Antourage . authWithApiKey ( 'put_your_apiKey_there' , 'put_user_id_from_your_base_or_null' , 'put_user_nickname_from_your_base_or_null' ); Capacitor(Ionic) You should to try call this method once per app lifecycle. import { Plugins } from '@capacitor/core' ; const { AntViewerPlugin } = Plugins ; AntViewerPlugin . auth ({ apiKey : \"put_your_apiKey_there\" , refUserId : \"put_user_id_from_your_base_or_null\" , nickname : \"put_user_nickname_from_your_base_or_null\" }) Add UI part The main feature of Antourage SDK is a widget - a simple button that should be placed on your screen. You can set a predefined position and extra margins for it. The widget will fully work only after successful authorization. If you need to know when the Feed screen appears and disappears you can use callbacks. iOS import Antourage class ViewController : UIViewController { var widget : AntWidget ! { didSet { view . addSubview ( widget . view ) } } override func viewDidLoad () { super . viewDidLoad () widget = AntWidget . shared } } Android Add antourage widget view to the layout: <com.antourage.weaverlib.ui.fab.AntourageFab android:id= \"@+id/antfab\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" app:layout_constraintLeft_toLeftOf= \"parent\" app:layout_constraintBottom_toBottomOf= \"parent\" app:layout_constraintRight_toRightOf= \"parent\" /> Also override onResume and onPause in activity that contains widget: override fun onResume () { super . onResume () antfab . onResume () } override fun onPause () { super . onPause () antfab . onPause () } React native import AntourageView from 'react-native-antourage' ; // ... render () { return ( < View style = { styles . container } > < Text style = { styles . welcome } > Welcome to React Native !< /Text> < Text style = { styles . instructions } > To get started , edit App . js < /Text> < Text style = { styles . instructions } > { instructions } < /Text> < AntourageView onViewerAppear = {() => console . log ( 'Appeared' )} onViewerDisappear = {() => console . log ( 'Disappeared' )} widgetPosition = { 'bottomRight' } widgetLocale = { 'en' } widgetMargins = {{ vertical : 50 , horizontal : 20 }} /> < /View> ); } Capacitor(Ionic) Antourage widget works as overlay over Capacitor web view. You can show and hide it whenever you want (navigation handlers or component lifecycle etc). import { Plugins } from '@capacitor/core' ; const { AntViewerPlugin } = Plugins ; AntViewerPlugin . showWidget (); AntViewerPlugin . hideWidget (); Widget position and margins You can set any position from the list: topLeft midLeft bottomLeft topMid bottomMid topRight midRight bottomRight iOS import Antourage // ... AntWidget . shared . widgetPosition = . bottomRight AntWidget . shared . widgetMargins = WidgetMargins ( vertical : 10 , horizontal : 20 ) // ... React native import AntourageView from 'react-native-antourage' ; // ... < AntourageView widgetPosition = { 'bottomRight' } widgetMargins = {{ vertical : 50 , horizontal : 20 }} /> // ... Capacitor(Ionic) import { Plugins } from '@capacitor/core' ; const { AntViewerPlugin } = Plugins ; AntViewerPlugin . setPosition ({ platform : \"ios\" , position : \"bottomLeft\" }); // iOS only AntViewerPlugin . setPosition ({ platform : \"android\" , position : \"bottomLeft\" }); // android only AntViewerPlugin . setPosition ({ position : \"bottomLeft\" }); // both AntViewerPlugin . setMargins ({ platform : \"ios\" , horizontal : 0 , vertical : 30 }); // iOS only AntViewerPlugin . setMargins ({ platform : \"android\" , horizontal : 10 , vertical : 50 }); // android only AntViewerPlugin . setMargins ({ horizontal : 0 , vertical : 30 }); // both Property Type Description onViewerAppear Closure Called when the user opens the widget controller. onViewerDisappear Closure Called when the user dismisses the widget controller. widgetPosition Enum You can set any widget position from enum widgetMargins Struct You can set custom horizontal and vertical margin for each position. But some positions may ignore it. Max vertical - 220, max horizontal - 50. Orientation (iOS only) Your app may support only portrait orientation, but our widget should be able to use landscape orientation while playing video. We suggest two approaches to solve it. First of all you should enable ladnscape orientation in xcode project. iOS native You can lock orientation for specific controllers by adding code below to them: override var supportedInterfaceOrientations : UIInterfaceOrientationMask { return [. portrait ] } React native You can use some third-party library to be able to lock orientations occasionally depending on the content. Capacitor(Ionic) First approach: You can use cordova-plugin-screen-orientation to be able to lock orientations occasionally depending on the content. Just add two listeners to handle widget state: import { Plugins } from '@capacitor/core' ; const { AntViewerPlugin } = Plugins ; AntViewerPlugin . addListener ( 'onViewerAppear' , ( info : any ) => { console . log ( 'viewer did appear' ); // window.screen.orientation.unlock(); }); AntViewerPlugin . addListener ( 'onViewerDisappear' , ( info : any ) => { console . log ( 'viewer did disappear' ); //window.screen.orientation.lock('portrait'); }); Second approach (a bit easier): We can lock main capacitor controller to portrait from plugin (but application will support lanscape). It means that your ionic UI that runs in webView will be in portrait only, but everthing outside capacitor controller (Antrourage screens, or some native modals etc) will be able to use landscape. You just need to call this function after your app starts: import { Plugins } from '@capacitor/core' ; const { AntViewerPlugin } = Plugins ; AntViewerPlugin . lockCapacitorControllerToPortrait (); Examples iOS To run the example project, clone the Antourage repo , and run pod install from the Example directory first. Once Cocoapods finishes installing, open the AntViewer_ios.xcworkspace and you will find a basic Swift project. React native To run the example project, clone the Antourage repo first. Run yarn bootstrap in the root directory to install the required dependencies for each package. While developing, you can run the example app for testing needs. To start the packager: yarn example start To run the example app on Android: yarn example android To run the example app on iOS: yarn example ios Capacitor(Ionic) To run the example project, clone the Antourage repo first. And run code below from the example directory: npm i npx cap sync ionic capacitor run ios --livereload --external","title":"Get Started"},{"location":"widget/#get-started-antourage-sdk","text":"The Antourage SDK is the easiest way to integrate your app with Antourage. Our SDK currently works with native iOS , native Android , Capacitor(Ionic) , and React Native technologies. For each technology we prepared profound guide with code semples.","title":"Get Started - Antourage SDK"},{"location":"widget/#requirements","text":"For successful integration please see our requirements below and be sure that everything compatible. iOS iOS 11.3 + Cocoapods Landscape orientation support Android Minimum Android SDK: Antourage widget requires a minimum API level of 21; Starting from 0.2.0 version library has migrated to the androidX, so make sure that you have android.useAndroidX=true android.enableJetifier=true in your gradle.properties React native react-native >= 0.62.2 iOS: iOS 11.3 + Cocoapods Landscape orientation support Android: Minimum Android SDK: Antourage widget requires a minimum API level of 21; Starting from 0.2.0 version library has migrated to the androidX, so make sure that you have android.useAndroidX=true android.enableJetifier=true in your gradle.properties Capacitor(Ionic) Capacitor iOS: iOS 11.3 + Cocoapods Landscape orientation support Android: Minimum Android SDK: Antourage widget requires a minimum API level of 21; Starting from 0.2.0 version library has migrated to the androidX, so make sure that you have android.useAndroidX=true android.enableJetifier=true in your gradle.properties","title":"Requirements"},{"location":"widget/#installation","text":"iOS The Antourage SDK for iOS is available as a CocoaPods pod . CocoaPods is an open source dependency manager for Swift and Objective-C Cocoa projects. If you don't already have the CocoaPods tool, install it on macOS by running the following command from the terminal. For details, see the CocoaPods Getting Started guide . brew install cocoapods 1. Add the dependency for Antourage to your project's Podfile: pod 'Antourage' 2. Run $ pod install to install the dependency Also please make sure to use Cocoapods v1.10 and later. Note: You may need to update the CocoaPods Master Spec Repo by running $ pod repo update master in order to fetch the latest specs for Antourage. Android Add: compileOptions { targetCompatibility 1.8 sourceCompatibility 1.8 } and dependencies { ... implementation 'com.github.antourage:AntViewer-android:2.0.24' } React native Antourage SDK is installed with npm (Node Package Manager) . To install the SDK go through steps below: Step 1 npm i react-native-antourage --save Step 2 Open ios directory from terminal and install pods: cd ios pod install Capacitor(Ionic) Antourage SDK is installed with npm (Node Package Manager) . To install the SDK go through steps below: Step 1 npm i antourage_capacitor --save Step 2 npx cap sync Android additional configuration You should find app build.gradle file and add maven { url 'https://jitpack.io' } to the repositories block. You should create variable private AntViewerPlugin antPlugin; , add import com.antourage.plugin.AntViewerPlugin; , add(AntViewerPlugin.class); and initialize antPlugin with antPlugin = (AntViewerPlugin) getBridge().getPlugin(AntViewerPlugin.class.getSimpleName()).getInstance(); in MainActivity class. Also you need to add antPlugin.onPause(); and antPlugin.onResume(); to overriden onPause and onResume methods accordingly, as you see below: npx cap sync","title":"Installation"},{"location":"widget/#usage","text":"","title":"Usage"},{"location":"widget/#authentication","text":"Please be sure that you already have the API key for Antourage, otherwise please contact Antourage to request one for your application. Optionally you can provide refUserId for user identification in our system and nickname to pre-setup it for chat (user can change it any time after). iOS It's static method (no need object init), you can use it anywhere you want (login/app start etc). import Antourage AntWidget . authWith ( apiKey : \"put_your_apiKey_there\" , refUserId : \"put_user_id_from_your_base_or_nil\" , nickname : \"put_user_nickname_from_your_base_or_nil\" ) Android It's static method (no need object init), you can use it anywhere you want (login/app start etc). AntourageFab . authWith ( \"put_your_apiKey_there\" , \"put_user_id_from_your_base_or_null\" , \"put_user_nickname_from_your_base_or_null\" , context ) React native You should to try call this method once per app lifecycle. import { Antourage } from 'react-native-antourage' ; // ... Antourage . authWithApiKey ( 'put_your_apiKey_there' , 'put_user_id_from_your_base_or_null' , 'put_user_nickname_from_your_base_or_null' ); Capacitor(Ionic) You should to try call this method once per app lifecycle. import { Plugins } from '@capacitor/core' ; const { AntViewerPlugin } = Plugins ; AntViewerPlugin . auth ({ apiKey : \"put_your_apiKey_there\" , refUserId : \"put_user_id_from_your_base_or_null\" , nickname : \"put_user_nickname_from_your_base_or_null\" })","title":"Authentication"},{"location":"widget/#add-ui-part","text":"The main feature of Antourage SDK is a widget - a simple button that should be placed on your screen. You can set a predefined position and extra margins for it. The widget will fully work only after successful authorization. If you need to know when the Feed screen appears and disappears you can use callbacks. iOS import Antourage class ViewController : UIViewController { var widget : AntWidget ! { didSet { view . addSubview ( widget . view ) } } override func viewDidLoad () { super . viewDidLoad () widget = AntWidget . shared } } Android Add antourage widget view to the layout: <com.antourage.weaverlib.ui.fab.AntourageFab android:id= \"@+id/antfab\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" app:layout_constraintLeft_toLeftOf= \"parent\" app:layout_constraintBottom_toBottomOf= \"parent\" app:layout_constraintRight_toRightOf= \"parent\" /> Also override onResume and onPause in activity that contains widget: override fun onResume () { super . onResume () antfab . onResume () } override fun onPause () { super . onPause () antfab . onPause () } React native import AntourageView from 'react-native-antourage' ; // ... render () { return ( < View style = { styles . container } > < Text style = { styles . welcome } > Welcome to React Native !< /Text> < Text style = { styles . instructions } > To get started , edit App . js < /Text> < Text style = { styles . instructions } > { instructions } < /Text> < AntourageView onViewerAppear = {() => console . log ( 'Appeared' )} onViewerDisappear = {() => console . log ( 'Disappeared' )} widgetPosition = { 'bottomRight' } widgetLocale = { 'en' } widgetMargins = {{ vertical : 50 , horizontal : 20 }} /> < /View> ); } Capacitor(Ionic) Antourage widget works as overlay over Capacitor web view. You can show and hide it whenever you want (navigation handlers or component lifecycle etc). import { Plugins } from '@capacitor/core' ; const { AntViewerPlugin } = Plugins ; AntViewerPlugin . showWidget (); AntViewerPlugin . hideWidget ();","title":"Add UI part"},{"location":"widget/#widget-position-and-margins","text":"You can set any position from the list: topLeft midLeft bottomLeft topMid bottomMid topRight midRight bottomRight iOS import Antourage // ... AntWidget . shared . widgetPosition = . bottomRight AntWidget . shared . widgetMargins = WidgetMargins ( vertical : 10 , horizontal : 20 ) // ... React native import AntourageView from 'react-native-antourage' ; // ... < AntourageView widgetPosition = { 'bottomRight' } widgetMargins = {{ vertical : 50 , horizontal : 20 }} /> // ... Capacitor(Ionic) import { Plugins } from '@capacitor/core' ; const { AntViewerPlugin } = Plugins ; AntViewerPlugin . setPosition ({ platform : \"ios\" , position : \"bottomLeft\" }); // iOS only AntViewerPlugin . setPosition ({ platform : \"android\" , position : \"bottomLeft\" }); // android only AntViewerPlugin . setPosition ({ position : \"bottomLeft\" }); // both AntViewerPlugin . setMargins ({ platform : \"ios\" , horizontal : 0 , vertical : 30 }); // iOS only AntViewerPlugin . setMargins ({ platform : \"android\" , horizontal : 10 , vertical : 50 }); // android only AntViewerPlugin . setMargins ({ horizontal : 0 , vertical : 30 }); // both Property Type Description onViewerAppear Closure Called when the user opens the widget controller. onViewerDisappear Closure Called when the user dismisses the widget controller. widgetPosition Enum You can set any widget position from enum widgetMargins Struct You can set custom horizontal and vertical margin for each position. But some positions may ignore it. Max vertical - 220, max horizontal - 50.","title":"Widget position and margins"},{"location":"widget/#orientation-ios-only","text":"Your app may support only portrait orientation, but our widget should be able to use landscape orientation while playing video. We suggest two approaches to solve it. First of all you should enable ladnscape orientation in xcode project. iOS native You can lock orientation for specific controllers by adding code below to them: override var supportedInterfaceOrientations : UIInterfaceOrientationMask { return [. portrait ] } React native You can use some third-party library to be able to lock orientations occasionally depending on the content. Capacitor(Ionic) First approach: You can use cordova-plugin-screen-orientation to be able to lock orientations occasionally depending on the content. Just add two listeners to handle widget state: import { Plugins } from '@capacitor/core' ; const { AntViewerPlugin } = Plugins ; AntViewerPlugin . addListener ( 'onViewerAppear' , ( info : any ) => { console . log ( 'viewer did appear' ); // window.screen.orientation.unlock(); }); AntViewerPlugin . addListener ( 'onViewerDisappear' , ( info : any ) => { console . log ( 'viewer did disappear' ); //window.screen.orientation.lock('portrait'); }); Second approach (a bit easier): We can lock main capacitor controller to portrait from plugin (but application will support lanscape). It means that your ionic UI that runs in webView will be in portrait only, but everthing outside capacitor controller (Antrourage screens, or some native modals etc) will be able to use landscape. You just need to call this function after your app starts: import { Plugins } from '@capacitor/core' ; const { AntViewerPlugin } = Plugins ; AntViewerPlugin . lockCapacitorControllerToPortrait ();","title":"Orientation (iOS only)"},{"location":"widget/#examples","text":"iOS To run the example project, clone the Antourage repo , and run pod install from the Example directory first. Once Cocoapods finishes installing, open the AntViewer_ios.xcworkspace and you will find a basic Swift project. React native To run the example project, clone the Antourage repo first. Run yarn bootstrap in the root directory to install the required dependencies for each package. While developing, you can run the example app for testing needs. To start the packager: yarn example start To run the example app on Android: yarn example android To run the example app on iOS: yarn example ios Capacitor(Ionic) To run the example project, clone the Antourage repo first. And run code below from the example directory: npm i npx cap sync ionic capacitor run ios --livereload --external","title":"Examples"}]}